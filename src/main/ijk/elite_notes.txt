
;; The extract-seed-for- operations are basically "roll a die of size X" only drawing the die result directly from the seed.

(defn extract-seed-for-name-length
  "Given a planet seed, determine the length of the name (3 or 4 digraphs)"
  [:int/seed/planet-seed]
  ;;->
  :int/parameter/name-length [3-4])

(defn start-new-planet-name-string
  "Given a planet seed, extract the token and prepare to generate the name"
  [:int/seed/planet-seed]
  ;;->
  :int/seed/token-seed
  :str/planet-name/empty-string)

;; we *could* make twisting the seed into its own operation, but instead I'm opting to model it as a non-op function that these operations call.
(defn assemble-name
  "Given a token-seed, name-length, and name-in-progress string, plus the table of digraphs, 
  generate the next step of the name generation. Return either the partially-completed string
  (seed + string) or the final planet name."
  [;;consumed!:int/seed/token-seed
   :int/parameter/name-length
   ;;consumed!:str/planet-name/assembling-string
   :list/table/digraph-token-table]
  ;;->
  :int/seed/twisted-seed 
  :str/planet-name/updated-string
  OR ; once length exceeds name-length
  :str/parameter/planet-name)

(defn extract-seed-for-economy
  "Given a planet-seed, generate the economic properties of the planet."
  [:int/seed/planet-seed]
  ->
  :int/parameter/economy [0-7] 
  :int/parameter/prosperity {0 :rich 1 :average 2 :poor 3 :mainly}
  :int/parameter/economy-type {0 :industrial 1 :agricultural}
  )

(defn extract-seed-for-government
  "Given a planet-seed, generated the government type, from a table of eight possibilities."
  [:int/seed/planet-seed]
  ->
  :int/parameter/government-type [0-7] [:anarchy :feudal :multi-government :dictatorship :communist :confederacy :democracy :corporate-state])

(defn extract-seed-for-tech-level
  "Given a planet-seed, economy, and governement-type, generate the tech-level of the planet."

  [:int/seed/planet-seed :int/parameter/economy :int/parameter/government]
  ->
  :int/parameter/tech-level [0-14] ; rounded up
  )

(defn extract-seed-for-population
  "Given the tech-level, economy, and government-type, generate the planet's population, in hundreds of millions."
  [:int/parameter/tech-level :int/parameter/economy :int/parameter/government]
  ->
  :int/parameter/population [1-71] ; ((tech level * 4) + economy + government + 1)
                                   ; divide by ten to get population in billions
  )

(defn extract-seed-for-productivity
  "Given the economy, government-type, and population, generate the planet's productivity level."
  [:int/parameter/economy :int/parameter/government :int/parameter/population]
  ->
  :int/parameter/productivity [96-62480] ; ((flip economy) + 3) * (government + 4) * population * 8
                                         ; in millions of credits
  )

(defn extract-seed-for-species-type
  "Given the planet-seed, generate the species type."
  [:int/seed/planet-seed]
  ->
  :str/species-type ; "Human Colonials" or "Large Green Slimy Rodents" et cetera
  )

(defn extract-seed-for-planet-radius
  "Given the planet-seed, generate the planet's radius. (The average radius - because David Braben was an astronomy major and cared about those details.)"
  [:int/seed/planet-seed]
  ->
  :int/parameter/planet-average-radius
  )

(defn market-price-for-item
  "Given an item-type and its base stats, plus the planet's economy and the current planet-temporary-seed (for the changing state), generate the market price and availability."
  [:int/item-type
   :table/item-base-price
   :table/item-price-mask
   :int/current-temp-random-seed
   :int/parameter/economy
   :table/item-economic-factor] ; economic factor -9 to +29
  ->
  :int/item-market-price ; in CR
  :str/item-unit-name ; tonnes, grammes, kilograms, etc.
  )

(defn start-goat-soup-string
  "Given a planet-seed and grammar, generate a 'goat soup' planet description by invoking the grammar."
  [:int/seed/planet-seed]
  ->
  :grammar/planet-description-grammar)

;; (defn goat-soup-string [:int/seed/token-seed
;;                         :str/partial-planet-description
;;                         :grammar/planet-description-grammar]
;;   [:int/seed/token-seed :str/partial-planet-description :grammar/planet-description-grammar]
;;   )



